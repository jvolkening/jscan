#!/usr/bin/perl

# hocr_to_pdf - combine HOCR HTML file as generated by tesseract 3.0.1 with
# the overlaid image into a searchable PDF

use strict;
use warnings;
use Getopt::Long;
use Image::Size;
use PDF::API2;
use XML::Twig;
use autodie;

my $do_ocr = 0;
my $f_out   = '';
my $res     = 300;
my $debug   = 0;
my $target_res = 150;
my $keywords = '';
my $min_xconf = 70;
my @files = ();

($do_ocr, $res, $target_res, $f_out, $keywords, @files) = @ARGV;

my ($w_img, $h_img);
my @lines;
my @wb;
my @lb;

my $px = $target_res / 72;

my ($s,$m,$h,$d,$mo,$y) = localtime(time);
$mo += 1;
$y += 1900;
my $fulldatestring = sprintf 'D:%04d%02d%02d%02d%02d%02d', $y, $mo, $d, $h, $m, $s;

my $sf = $target_res / $res;

my $pdf = PDF::API2->new;
$pdf->info(
    'Author' => 'J Volkening',
    'CreationDate' => $fulldatestring,
    'ModDate' => $fulldatestring,
    'Creator' => 'scan.pl',
    'Keywords' => $keywords,
);
for my $file (@files) {

    # get image size in points
    ($w_img, $h_img) =  imgsize($file);
    ($w_img, $h_img) = map {$_ / $px} ($w_img, $h_img);

    my $page = $pdf->page;

    # add background image
    $page->mediabox( $w_img, $h_img );
    my $overlay = $page->gfx;
    my $pic = $pdf->image_png($file);
    $overlay->image( $pic, 0, 0, $w_img, $h_img );

    # intialize font and font info
    my $f = $pdf->corefont( 'helvetica' );

    if ($do_ocr) {

        my $f_hocr = $file;
        $f_hocr =~ s/png/hocr/;

        # populate @words with word string and coordinates
        @wb = ();
        parse_hocr( $f_hocr );

        my $string = '';
        my $y = $h_img;
        my $t = $page->text;
        $t->translate(0,$y);
        $t->fillcolor('red') if ($debug);
        $t->render(3) if (! $debug) ; # make text invisible
        $t->font( $f, 9 ); # set size arbitrarily, scale later


        while (scalar @wb) {
            my $token = shift @wb;
            my $new_string = join ' ', $string, $token;
            my $w = $t->advancewidth($new_string);
            if ($w > $w_img) {
                $t->text($string);
                $string = $token;
                $t->nl();
            }
            else {
                $string = $new_string;
            }
        }
        $t->text($string);
            
    }
    
}

$pdf->saveas("$f_out");
exit;

sub parse_hocr {

    my ($filename) = @_;
    my $doc = XML::Twig->new(
        twig_roots => { 'span' => \&_parse_span },
    );
    $doc->parsefile($filename,ProtocolEncoding => 'UTF-8');

}

sub _parse_span {

    my ($twig, $element) = @_;
    return if ($element->att('class') ne 'ocr_line');
    my @spans = $element->children('span');
    for (@spans) {
        next if ($_->att('class') ne 'ocrx_word');
        my $word = $_->first_child_text;
        die "missing word" if (! defined $word);
        next if ($word !~ /\S/);
        my ($bbox,$conf) = split /;\s*/, $_->att('title');
        my ($discard, @coords) = split /\s/, $bbox;
        my ($discard2, $xconf) = split /\s/, $conf;
        next if ($xconf < $min_xconf);
        warn "$word\n";
        push @wb, $word;
    }
    return;

}
