#!/usr/bin/env perl

use strict;
use warnings;
use 5.012;

use File::Copy;
use File::Temp;
use File::Which;
use Getopt::Long;
use Time::Piece;
use Switch;
use autodie qw/:all/;

# defaults
my $quality   = 2;
my $ocr       = 0;
my $singles   = 0;
my $letter    = 0;
my $thresh    = 40;
my $trim      = 0;
my $min_score = 70,
my $crush_ocr = 0;
my $prompt_fn = 0;

my $scan_count = 0;
my $page_idx   = 1;
my $status     = 1;
my @pages      = ();
my $pdfname;

GetOptions(
    'quality=i'    => \$quality,
    'ocr'          => \$ocr,
    'singles'      => \$singles,
    'thresh=i'     => \$thresh,
    'letter'       => \$letter,
    'trim'         => \$trim,
    'min_score'    => \$min_score,
    'crush_ocr'    => \$crush_ocr,
    'prompt_names' => \$prompt_fn,
    'out=s'        => \$pdfname,
);

# check for required binaries
my %BIN;
for (qw/ scanimage convert tesseract hocr_by_word hocr_by_page letter/) {
    my $bin = which $_;
    die "Can't find $_ on path\n" if (! defined $bin);
    $BIN{$_} = $bin;
}

# main loop
LOOP:
while ($status) {

    if (! defined $pdfname) {

        my $t = localtime();
        my $datestring = $t->ymd;
        my $timestring = $t->hms('.');
        $pdfname = "$datestring.$timestring.pdf";

    }

    my $t1   = File::Temp->new( UNLINK => 1, SUFFIX => '.pnm' );
    my $t2   = File::Temp->new( UNLINK => 1, SUFFIX => '.png' );

    print "\ninsert sheet\n";
    my $crop = $trim ? '--swcrop ' : '';
    my $mode = $quality == 5 ? 'color' : 'gray';
    my $ret = system( "$BIN{scanimage} --mode $mode --res 300 $crop > $t1" );
    die "Failed during image scanning: $!\n" if ($ret);
    if ($letter) {
        my $t1a = File::Temp->new( UNLINK => 1, SUFFIX => '.pnm' );
        my $ret = system( "$BIN{letter} --in $t1 --out $t1a" );
        die "Failed running letter: $!\n" if ($ret);
        copy($t1a => $t1) or die "Failed to copy letter output: $@\n";
    }
    if ($ocr) {
        $ret = system(
            $BIN{convert},
            $t1,
            '-resize' => '150%',
            '-contrast-stretch' => '0.5%x35%',
            '+repage',
            $t2
        );
        die "Failed running convert: $!\n" if ($ret);
        my $base = "$t2";
        $base =~ s/\.png$//;
        $ret = system( "$BIN{tesseract} -l eng $t2 $base hocr" );
        die "Failed running tesseract: $!\n" if ($ret);
    }
    my @args = ($t1);
    if ($quality == 1 || $quality == 3) {
        push @args, '-resize', '50%';
    }
    if ($quality == 1 || $quality == 2) {
        push @args, '-threshold', "$thresh\%";
    }
    if ($quality == 3) {
        push @args, '-contrast-stretch', "0.1\%x20\%";
    }
    if ($quality == 3 || $quality == 4) {
        push @args, '-colors', 4;
    }
    push @args, '-quality', 90, $t2;
    $ret = system(
        $BIN{convert},
        @args,
    );

    push @pages, $t2;

    my $inp = 'd';
    if (! $singles) {
        print "\nwhat next? (p|d|q)";
        $inp = <STDIN>;
        chomp $inp;
    }
    if ($inp eq 'p') {
        next LOOP;
    }
    #print "Enter keywords: ";
    #my $keywords = <STDIN>;
    #chomp $keywords;
    my $keywords = '';
    my $res = $quality == 1 || $quality == 3
        ? 150
        : 300;

    my $hocr_bin = $crush_ocr ? $BIN{hocr_by_page} : $BIN{hocr_by_word};
    $ret = system(
        $hocr_bin,
        $ocr ? 1 : 0,
        450,
        $res,
        $pdfname,
        "\"$keywords\"",
        @pages,
    );
    die "Failed to run hocr_by_word\n" if ($ret);
    for (@pages) {
        $_ =~ s/png$/hocr/;
        unlink $_ if (-e $_);
    }
    if ($inp eq 'd') {
        $page_idx = 1;
        @pages = ();
        $pdfname = undef;
        print "Scanned " . ++$scan_count . " documents\n";
        next LOOP;
    }
    $status = 0; # on 'q' or other, quit
}

